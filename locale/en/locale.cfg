[mod-name]
inventory-selector=Inventory Selector

[mod-description]
inventory-selector=When machines have multiple inventories, restrict inserter access to a specific one (or grant access to one previously inaccessible). Avoid common pitfalls of confusing fuel, ingredients, and cargo:\n\nPlatforms waiting on a bumbling swarm of logistic bots to prepare deliveries of blue circuits as inserters sit tragically idle beside a silo? Finding train fuel in exciting new places after a quick stop at the wrong depot? Biochambers in your goldfish farm burning legendary fish food?\n\nNever again!\n\nIn addition to inserters, this mod also supports configuration of any machine with a drop target, including mining drills, recyclers or any modded crafting machines making use of this feature. Plenty of configuration options are provided for tuning inserter logic and performance, as well as convenient APIs to support painless mod interaction, including easy integration into custom mod GUIs. Automated configuration with built-in deadlock avoidance is also supported, with an optional circuit network interface provided.

[mod-setting-name]
inventory-selector-support-entities=Supported entities
inventory-selector-enable-gui=Enable GUI
inventory-selector-enable-circuit=Enable circuit network
inventory-selector-enable-inventory=Allowed inventories
inventory-selector-show-all=Show all inventory types
inventory-selector-deadlock-safety=Avoid deadlock
inventory-selector-pending-retry-ticks=Deferred retry rate (ticks)
inventory-selector-floating-retry-ticks=Floating check rate (ticks)
inventory-selector-update-circuit-ticks=Circuit network update rate (ticks)
inventory-selector-enable-debug=Enable debug mode

[mod-setting-description]
inventory-selector-support-entities=The types of entities allowing configuration of their targeted inventory.
inventory-selector-enable-gui=Enable the standard GUI to allow manual configuration by players.\n\nThis may be disabled in cases where another mod is expected to provide a GUI for these settings, or when it implements some other logic for control instead.
inventory-selector-enable-circuit=Enable the standard circuit network interface for automated control based on circuit signals.\n\nThe current implementation is experimental, and may have a greater impact on performance than desired. This may be improved in the future, though the potential for improvement is limited by the current API. This setting may be disabled in cases where another mod is expected to provide an alternative control mechanism, or if the performance impact is too great.\n\n[img=warning-white] If disabled mid-game, any circuit-controlled entities will simply revert to a setting of [item=inventory-selector-inventory-none], as if disconnected from the circuit network.
inventory-selector-enable-inventory=The inventories available for selection in the standard GUI.\n\nThis does not affect settings made through other control interfaces, such as the circuit network or mod interactions.
inventory-selector-show-all=Show all inventory types, including those that may not be valid on the current target.
inventory-selector-deadlock-safety=Avoid potential deadlock when an inserter's drop inventory is changed while it is already holding an item destined for the previously configured inventory. In these cases, this change is deferred until the hand is empty.\n\nIn general, player-initiated changes (e.g. via the GUI) are applied immediately by default, while automated changes (e.g. via the circuit network) will be deferred when risky, until safe to apply on a later tick.\n\nWhatever this setting, a player may "unstick" a stuck inserter as in other situations: by manually clearing its held item.
inventory-selector-pending-retry-ticks=How often an inserter should retry application of pending changes, when those changes are deferred to avoid potential deadlock.\n\nRetrying a deferred change is not a very expensive operation, but it can safely be performed less frequently than every tick without compromising expected behavior. Ideally, this should at least be frequent enough to ensure a pending change is applied during an inserter's next backswing (before it can pick up new items). The fastest inserter in the base game ([entity=fast-inserter,quality=legendary]) needs only 5 ticks to complete half of a cycle, requiring retries at least this frequent for perfectly consistent behavior.\n\nHowever, the consequences of missing the next window of opportunity are not severe, with a configuration becoming eventually correct after a slightly longer delay, so long as inserters do not fall into an unfortunate resonance pattern with this retry rate.
inventory-selector-floating-retry-ticks=How often to verify that a "floating" target is still valid. This mainly applies to inserters directed at open space or manually-controlled vehicles, where the expected target may change without warning.\n\nMaintaining consistency with base-game behavior requires relatively expensive searching for entities. Maximum accuracy would demand performing this on every tick, though the performance impact of this may become significant with many inserters in this state.\n\nFortunately, the consequences of checking this less frequently only apply to interactions with player-operated vehicles. Most vehicles under the player's control should move slowly enough for even moderate delays to be barely noticeable, allowing this setting to be freely tuned for the desired tradeoff between accuracy and performance.
inventory-selector-update-circuit-ticks=How often to update entities controlled by the circuit network.\n\nAs the current API does not expose features that would enable more performant interaction with other (potentially idle) entities, perfectly accurate and responsive behavior requires expensive polling on every tick.\n\nAny reduction in update frequency will necessarily sacrifice this accuracy. This setting may be adjusted to reduce performance impact in cases where "perfect" accuracy is not critical.
inventory-selector-enable-debug=Debug mode provides additional information useful for development and testing.\n\nIt skips certain safety checks when not strictly necessary based on current assumptions. Useful for testing those assumptions, or to expose improper usage of provided APIs.\n\nDisabled by default for more graceful handling of less-than-perfect interactions with other systems during normal gameplay.

[string-mod-setting]
inventory-selector-support-entities-filtered=Filtered inserters
inventory-selector-support-entities-inserters=Any inserters
inventory-selector-support-entities-all=Anything that drops items
inventory-selector-deadlock-safety-always-immediate=Always immediate
inventory-selector-deadlock-safety-allow-safe=Allow safe
inventory-selector-deadlock-safety-allow-unsafe=Allow unsafe
inventory-selector-deadlock-safety-always-safe=Always safe
inventory-selector-enable-inventory-base=Base-game equivalent
inventory-selector-enable-inventory-all=Unrestricted access

[string-mod-setting-description]
inventory-selector-support-entities-filtered=Allow configuration of inserters only if they also support item filters.\n\nNote that this includes all inserters defined by the base game, but may be useful alongside mods that add additional inserter variants.
inventory-selector-support-entities-inserters=Allow configuration of any kind of inserter.
inventory-selector-support-entities-all=Allow configuration of any kind of entity that can drop items nearby.\n\nThis additionally includes mining drills, recyclers, and any modded crafting machines that define a drop position for their output.
inventory-selector-deadlock-safety-always-immediate=Always apply changes immediately, disabling deadlock mitigation completely.\n\nThis setting is ideal for control freaks and power users, giving your factory the power to deadlock itself at any moment because of an automated change to inserter settings.\n\n[img=warning-white] Switching to this mode mid-game will cause any previously deferred changes to be applied immediately (or more accurately on their next attempt, which is practically immediate).
inventory-selector-deadlock-safety-allow-safe=Changes are applied immediately, with risky changes only deferred if safe behavior is specifically requested.\n\nThis is an alternative to the standard mode ("Allow Unsafe"), differing only in the default behavior when not explicitly specified.
inventory-selector-deadlock-safety-allow-unsafe=Changes are automatically deferred when risky, unless immediate behavior is specifically requested (e.g. by a GUI interaction).\n\nThis allows most automated control to operate safely while enabling direct control by players similar to other settings. This is the default setting, ideal for engineers expecting sensible vanilla-like behavior in most situations.
inventory-selector-deadlock-safety-always-safe=Risky changes are always deferred, potentially indefinitely.\n\nThis setting is ideal for those who do not trust their fellow engineers (or themselves) not to accidentally deadlock an inserter while configuring it, though possibly causing confusion for users expecting an instant response.
inventory-selector-enable-inventory-base=Only allow selection of inventories that are generally accessible in the base game.\n\nThis setting still provides additional control, which may permit modes of interaction not otherwise possible in the base game.
inventory-selector-enable-inventory-all=Allow access to additional inventories normally hidden to inserters, which may be useful in more niche solutions.\n\nThis includes access to module slots in machines other than beacons as well as direct access to logistic trash slots.\n\n[img=warning-white] This also supports access modes that may not normally make sense, such as input into output slots or vice versa.

# GUI strings
[inventory-selector-gui]
title=Inventory Selector
generic-enabled=Restrict
pickup-title=Pickup inventory
pickup-enabled=Restrict pickup inventory
pickup-enabled-tooltip=Restrict this entity to only pick up items from the selected inventory type in its target.
drop-title=Drop inventory
drop-enabled=Restrict drop inventory
drop-enabled-tooltip=Restrict this entity to only drop items into the selected inventory type in its target.
circuit-set-pickup=Set pickup inventory
circuit-set-pickup-tooltip=Sets the selected pickup inventory based on the signals from the circuit network.
circuit-set-drop=Set drop inventory
circuit-set-drop-tooltip=Sets the selected drop inventory based on the signals from the circuit network.

# Names of inventory types
[inventory-selector-inventory-name]
none=None
ammo=Ammo
main=Main
trash=Trash
waste=Waste
fuel=Fuel
byproduct=Byproduct
ingredient=Ingredient
product=Product
module=Module
dump=Dump
robot=Robot
material=Material
rocket=Rocket

# Descriptions of inventory types
[inventory-selector-inventory-description]
none=No inventory access
ammo=Consumable ammunition used by guns and turrets
main=Inert generic storage for items (e.g. chests, vehicle trunks)
trash=Items to be automatically removed by logistic system
waste=Items that are no longer valid due to spoilage
fuel=Items with energy value to be consumed to power the machine
byproduct=Byproducts of consumed fuel items (e.g. burnt results)
ingredient=Items used as inputs to recipes
product=Items produced by recipes
module=Modules to modify machine performance
dump=Items to be removed after change of recipe
robot=Robots parked in a roboport
material=Repair packs or other supplies in a roboport
rocket=Items to be loaded into a rocket for launch

[entity-name]
inventory-selector-proxy=Inventory Selector Proxy
inventory-selector-limbo=Limbo Container

[entity-description]
inventory-selector-proxy=A proxy container between a machine and another, forcing access to a specific inventory type.
inventory-selector-limbo=An empty zero-slot container, used as a placeholder inventory for invalid inventory selections.
